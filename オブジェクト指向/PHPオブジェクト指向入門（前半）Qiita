クラスとオブジェクト初級

オブジェクト指向の特徴
・外部には機能的にまとめられた最低限必要な情報しか公開しない
・ライブラリ開発や複数人での開発に向いている
・大規模になってきてもメンテナンスがしやすい

クラス・・・設計図のこと
プロパティ・・・情報のこと
public,private・・・アクセス権限
-> アロー演算子・・・インスタンスのプロパティにアクセスする
インスタンス・・・クッキーの型にくり抜かれた生地の様なもの
カプセル化・・・外部からのアクセスを禁止すること
メソッド・・・クラスに所属する関数のようなもの

class Robot {
  private $name = '';  プロパティを定義
  public function setName($name) {  setNameは関数名で$nameの値を設定
      $this->name = (string)filter_ver($name);   $thisは自分自身のオブジェクトを指す
}

  public function getName() {
      return $this->name;
  }
}

$a = new Robot;  インスタンスの作成
$a->setName('ロボ太郎');  メソッドを呼び出す
$b =new Robot;
$b->setName('ロボ太郎')

echo $a->getName();
echo $b->getName();

_______________________________________________________________________________________
クラスとオブジェクト中級

__construct という名前でコンストラクタメソッドを作ると、インスタンス生成時に自動的にコールされる
このような特別なメソッドを総称してマジックメソッドという

class Robot {
    private $name = '';
    public function __construct($name) {
        $this->setName($name);
}
    public function setName($name) {
        $this->name = (string)filter_var($name);
    }
    public function getName() {
        return $this->name;
    }
}

$a = new Robot('ロボ太郎');
echo $a->getName();  //ロボ太郎

その他のマジックメソッド:https://www.php.net/manual/ja/language.oop5.magic.php

stdClass・・・プロパティなどが何もない標準クラス
              特に定義をしなくともプロパティに値を入れられる
              未定義のプロパティにアクセスするとwarning

キャスト・・・ある変数を任意の型で評価（変換）することをキャストという
              例えば、「文字列」の数値を「整数」や「浮動小数点数」で変換すること

stdClassから配列へ
$array = (array)$stdClass;

配列からstdClassへ
$stdClass = (object)$array;

但し、 数字添え字配列 に対して (object) キャストは使用してはいけない
アクセス不能なプロパティが発生してしまう
連想配列だけを対象とする

通常の値渡し 
$a = 'value';
$b = $a;    $bにはvalueのコピーが渡される。その後$aの値を変えても$bの値は変わらない。

通常のリファレンス渡し
$a = 'value';
$b = &$a;   $aの値を変えると$bの値も変更される

オブジェクトのID渡し
$a = new stdClass;
$b = $a;  オブジェクトはIDという値で管理されている。

オブジェクトIDのリファレンス渡し
$a = new stdClass;
$b = &$a;  実際にリファレンス渡しがされるのは稀

静的プロパティ
・クラスのオブジェクトを生成せずにアクセスできる
・「クラス名::プロパティ名」のようにスコープ定義演算子（::）を使ってアクセスできる
・オブジェクト（インスタンス）に関係なく共通で管理している

<? php
class = NumPrint {
  private $num = 0 ;
  public static $staticNum = 0;
  public function addNum() {
      $this->num++;
      self::$staticNum++;
  } 
}

$numprint = new NumPrint();
$numprint->addNum();

print"プロパティの値".$numprint->num;
print",staticプロパティの値".NumPrint::$staticNum;

$newprint2 = new NumPrint();
$newprint2->addNum();

print"</br>プロパティの値".$numprint->num;
print",staticプロパティの値".NumPrint::$staticNum;

?>

実行結果
プロパティの値1,staticプロパティの値1
プロパティの値1,staticプロパティの値2   staticはオブジェクトに関係なく共通で管理されている

静的メソッド
<?php

class Sample {
  public static printTest() {
    print"staticメソッド";
  }
}

Sample::printTest();

?>

実行結果
staticメソッド

Factory Method パターン

$a = new Robot('ロボ太郎', 'red');
echo $a->getColor(); // red
$a->__construct('ロボ太郎', 'blue');  コンストラクタにアクセスすると色を書き換えることが出来てしまう
echo $a->getColor(); // blue

public static function createRedRobot($name) {
        return new self($name, 'red');  
        // クラス内にて自らのインスタンスを生成する場合、new クラス名 の代わりに new self が使える
    }

$a = Robot::createRedRobot('ロボ太郎');  メソッドでnew Robot
echo $a->getColor(); // red
$a->__construct('ロボ太郎', 'blue'); // エラー  privateになっている
echo $a->getColor(); // red

エラー（例外処理）

関数を定義
function div($a, $b) {
    if ($a > 0 && $b == 0) {
        return INF;
    }
    if ($a < 0 && $b == 0) {
        return -INF;
    }
    if ($a == 0 && $b == 0) {
        throw new Exception('ゼロ除算とか無理だってはっきりわかんだね');
    }
    return $a / $b;    ←どういう意味？？？？？
}

実行
try {
    echo "計算を始めます\n";
    printf("div(1, 0) = %s\n", div(1, 0));
    printf("div(-1, 0) = %s\n", div(-1, 0));
    printf("div(0, 0) = %s\n", div(0, 0));    ←throwされた場合
    echo "計算は正常に終了しました\n";        ↓強制的にcatch
} catch (Exception $e) {                      ←new Exception('ゼロ除算とか無理だってはっきりわかんだね');
    echo $e->getMessage() . "\n";
    echo "そんなことはしてはいけない（戒め）\n";
}

結果
計算を始めます
div(1, 0) = INF
div(-1, 0) = -INF
ゼロ除算とか無理だってはっきりわかんだね
そんなことはしてはいけない（戒め）

Exceptionクラスの概要
class Exception {
    private $message;
    private $code;
    public function __construct($message = '', $code = 0) {
        $this->message = $message;
        $this->code    = $code;
    }
    public function getMessage() {
        return $this->message;
    }
    public function getCode() {
        return $this->code;
    }
}

LogicException クラス
プログラムの論理的な(Logic)誤りを指摘する例外
いわば、コードを書いた自分のための警告
この例外を捕まえる必要は基本的に無く、逆に発生しないようにプログラムを書かなければならない

RuntimeException クラス
プログラムの実行時における(Runtime)例外
ユーザー入力・確率といった不確定要素の決定次第で発生してしまう、いわば発生しても仕方ない、発生することを想定して捕まえなければならない例外を表す

InvalidArgumentException
引数の型が期待する型と一致しなかった場合にスローされる例外

組み込みクラスの例外？？？？？
要復習

クロージャ   もう少し調べる必要がある
PHPでは関数をオブジェクトとして生成することが出来る
これは一般的にクロージャ、無名関数、ラムダなどと呼ばれる

$closure = function ($option) {
    return "そうだよ（{$option}）";
};
echo $closure('便乗');

・$closure = オブジェクト; という代入式の一部なので末尾に ; が必要である。
・function の後にすぐ引数の列挙が来る。関数名が存在しない

スコープ
PHPの変数は、使える有効範囲が限られており、この範囲のことをスコープと言う
{  }で囲まれた関数内で宣言した変数のことをローカル変数、その外で宣言した変数をグローバル変数と言う
それぞれの変数の効力が及ぶ有効範囲をローカルスコープ、グローバルスコープと呼ぶ
グローバルスコープはプログラム全体どこでも使うことが出来る

<?php    グローバルスコープ
function outputInfo($name) {    ローカルスコープ        
    $pet = “犬”; echo $name . “さんは” . $pet . “を飼っています。<br>”;    ローカルスコープ 
}    ローカルスコープ 
outputInfo(“山田”);     グローバルスコープ
?>

<?php
function outputInfo($name){
$pet = “犬”;
echo $name . “さんは” . $pet . “を飼っています。<br>”;
}
outputInfo(“山田”);
echo $pet . “は可愛いですね。”;   グローバルスコープで変数 $pet を呼び出すとエラーになる
?>

グローバル宣言をするとローカル変数がグローバルスコープでも使える

<?php
function outputInfo($name){
global $pet ;
$pet = “犬”; echo $name . “さんは” . $pet . “を飼っています。<br>”;
}
outputInfo(“山田”);
echo $pet . “は可愛いですね。”;
?>

引数以外の変数を利用したい場合は、useを使って渡す
<?php
$greeting = "Good morning";

$greet_nouse_use = function()
{
    error_log("message: " . $greeting);
};


$greet_use_use = function() use ($greeting)
{
    error_log("message: " . $greeting);
};

実行結果
message:
message: Good morning

クロージャの特徴として、引数以外の変数を実行時ではなく、
自分が定義された時点で解決するという特徴がある
下のコードでは無名関数$greetが定義された時点の変数$greetingの値はGood morning、
実行の時点ではHello
<?php
$greeting = "Good morning";

$greet = function () use ($greeting) {
    error_log("message: " . $greeting);
};

$greeting = 'Hello';
$greet();

実行結果
message: Good morning

コールバック  書き方がよくわからない
関数に引数として渡される関数
可変関数


call_user_func() 関数   これは分かるけど書き方が
クラスやオブジェクトのメソッドをコールバック関数として渡すには、call_user_func()関数を利用すると良い？？
第１引数には呼び出したいコールバック関数を渡します。通常の関数であれば可変関数と同じく、関数の名称を文字列で渡す
オブジェクトのメソッドの場合は、配列を用い0番目の要素にオブジェクト自身、
1番目の要素に呼び出したいメソッドの名称を文字列で渡す
呼び出したいメソッドがクラスの静的メソッドの場合、配列の0番目の要素にクラス名を文字列で渡す
<?php
# クラスの定義
class MyClass
{
    function callbackMethod()
    {
        return "hoge";
    }
    static function staticCallbackMethod()
    {
        return "fuga";
    }
}

#コールバック関数を受け取る関数
function func($callback)
{
    echo "callback function result :" . call_user_func($callback) . PHP_EOL;
}

#メソッドをコールバック関数として渡す。
$obj = new MyClass();
func(array($obj, "callbackMethod"));      # <= "callback function result :hoge"と出力

# 静的メソッドのをコールバック関数として渡す。
func(array("MyClass", "staticCallbackMethod"));  # <= "callback function result :fuga"と出力

無名関数でコールバック
<?php

#コールバック関数を受け取る関数
function func($callback)
{
    echo "callback function result :" . call_user_func($callback) . PHP_EOL;
}

# 無名関数をコールバック関数として渡す。
func(function() { return "bar"; });  # <= "callback function result :bar" と出力
一行目のfunc($callback)にfunction() { return "bar"; }を入れてるだけ？


実行するにはcall_user_func()を利用するか、
代入された変数に可変関数のように()を付与することでも呼び出すことができる
<?php
# 変数に代入した無名関数を呼び出す。     これもコールバックなのか
$func = function() { return "foo"; };
echo $func() . PHP_EOL;  # <= "foo"と出力される。

call_user_func_array 関数
配列形式で与えられた可変長引数を渡すことができる

$members= array(
    array('YJSNPI'),
    array('MUR'),
    array('KMR'),
);

 call_user_func_array 関数を使えば配列を引数として展開してコールすることが出来る
 但し今回に限っては array_merge 関数が引数を最低1つ必要とするため、1つ以上あるかどうかのチェックが必要

if ($members) { // (count($members) > 0) とほぼ同じ意味    ←ここで引数が１つ以上あるか確認してると思う
    $a = call_user_func_array('array_merge', $members);
} else {
    $a = array();
}

コンストラクタがコールできない
以下のような func_get_args 関数を用いた可変長引数を受け取るコンストラクタがあったときに対応できない
よく分からないけど、今はとりあえずそうなんだぁと思って復習する

class KarateTeam {
    private $members;
    public function __construct() {
        $this->members = func_get_args();  ←この関数の意味
    }
    public function display() {
        echo implode(', ', $this->members);      implodeとは配列で指定された複数の文字列を連結するための関数','で繋いでる
    }
}

悪い例
$members = array('YJSNPI', 'MUR', 'KMR');
/* Warning:  call_user_func_array() expects parameter 1 to be a valid callback      *
 *           non-static method KarateTeam::__construct() cannot be called staticall */
$team = call_user_func_array('KarateTeam::__construct', $members);
$team->display();

これに対応するためには、 ReflectionClass::newInstanceArgs メソッドを用いる
良い例
$members = array('YJSNPI', 'MUR', 'KMR');
$reflection = new ReflectionClass('KarateTeam');
$team = $reflection->newInstanceArgs($members);
$team->display(); // YJSNPI, MUR, KMR

継承
class B extends A { } 
BはAの継承クラスであるという定義
この定義から見てAのことを親と呼ぶことがある

継承したクラスでは
親クラスのプロパティやメソッドが全て引き継がれる
引き継いだもののうち public または protected なものに限定して内部からアクセスすることが出来る
外部からのアクセスは public に限定される

オーバーライド